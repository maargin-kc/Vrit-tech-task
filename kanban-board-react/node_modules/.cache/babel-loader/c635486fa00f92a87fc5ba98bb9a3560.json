{"ast":null,"code":"import React from\"react\";import{Button,Modal,FormGroup,FormLabel}from\"react-bootstrap\";import{Formik,Form,Field,ErrorMessage}from\"formik\";import*as Yup from\"yup\";import\"./NewTask.css\";import DatePicker from\"react-datepicker\";import\"react-datepicker/dist/react-datepicker.css\";var validationSchema=Yup.object().shape({title:Yup.string().required(\"Title is required\"),description:Yup.string().required(\"Description is required\"),startDate:Yup.date().nullable().required(\"Start Date is required\"),//endDate: Yup.date().nullable().required(\"End Date is required\"),\nendDate:Yup.date().when(\"startDate\",function(startDate,schema){return startDate&&schema.min(startDate,\"End date must be after the start date.\");}).nullable().required(\"End Date is required\")});function TaskForm(props){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Formik,{initialValues:props.editedValues||props.initialValues,validationSchema:validationSchema,onSubmit:props.onSubmit,enableReinitialize:true},function(formik){return/*#__PURE__*/React.createElement(Modal,{show:props.show,onHide:props.handleClose},/*#__PURE__*/React.createElement(Modal.Header,{closeButton:true},/*#__PURE__*/React.createElement(Modal.Title,null,props.taskState,\" Task\")),/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(Modal.Body,null,/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"Title\"),/*#__PURE__*/React.createElement(Field,{type:\"text\",id:\"title\",name:\"title\",className:\"form-control \".concat(formik.touched.title&&formik.errors.title?\"is-invalid\":\"\")}),/*#__PURE__*/React.createElement(ErrorMessage,{component:\"div\",name:\"title\",className:\"invalid-feedback\"})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"Description\"),/*#__PURE__*/React.createElement(Field,{type:\"text\",id:\"description\",name:\"description\",className:\"form-control \".concat(formik.touched.description&&formik.errors.description?\"is-invalid\":\"\"),as:\"textarea\"}),/*#__PURE__*/React.createElement(ErrorMessage,{component:\"div\",name:\"description\",className:\"invalid-feedback\"})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"Start Date\"),/*#__PURE__*/React.createElement(DatePicker,{selected:formik.values.startDate,name:\"startDate\",id:\"startDate\",onBlur:formik.handleBlur,onChange:function onChange(date){return formik.setFieldValue(\"startDate\",date);},className:\"form-control \".concat(formik.touched.startDate&&formik.errors.startDate?\"is-invalid\":\"\")}),/*#__PURE__*/React.createElement(ErrorMessage,{component:\"div\",name:\"startDate\",className:\"invalid-feedback\"})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"End Date\"),/*#__PURE__*/React.createElement(DatePicker,{selected:formik.values.endDate,name:\"endDate\",onBlur:formik.handleBlur,onChange:function onChange(date){return formik.setFieldValue(\"endDate\",date);},className:\"form-control \".concat(formik.touched.endDate&&formik.errors.endDate?\"is-invalid\":\"\")}),/*#__PURE__*/React.createElement(ErrorMessage,{component:\"div\",name:\"endDate\",className:\"invalid-feedback\"}))),/*#__PURE__*/React.createElement(Modal.Footer,null,/*#__PURE__*/React.createElement(Button,{variant:\"secondary\",onClick:props.handleClose,type:\"reset\"},\"Close\"),/*#__PURE__*/React.createElement(Button,{variant:\"success\",type:\"submit\"},\"Save Changes\"))));}));}export default TaskForm;","map":{"version":3,"sources":["D:/Vrit-tech-task/kanban-board-react/src/components/Board/New Task/TaskForm.js"],"names":["React","Button","Modal","FormGroup","FormLabel","Formik","Form","Field","ErrorMessage","Yup","DatePicker","validationSchema","object","shape","title","string","required","description","startDate","date","nullable","endDate","when","schema","min","TaskForm","props","editedValues","initialValues","onSubmit","formik","show","handleClose","taskState","touched","errors","values","handleBlur","setFieldValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./NewTask.css\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string().required(\"Title is required\"),\r\n  description: Yup.string().required(\"Description is required\"),\r\n  startDate: Yup.date().nullable().required(\"Start Date is required\"),\r\n  //endDate: Yup.date().nullable().required(\"End Date is required\"),\r\n  endDate: Yup.date()\r\n    .when(\r\n      \"startDate\",\r\n      (startDate, schema) =>\r\n        startDate &&\r\n        schema.min(startDate, \"End date must be after the start date.\")\r\n    )\r\n    .nullable()\r\n    .required(\"End Date is required\"),\r\n});\r\n\r\nfunction TaskForm(props) {\r\n  return (\r\n    <>\r\n\r\n      <Formik\r\n        initialValues={props.editedValues|| props.initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={props.onSubmit}\r\n        enableReinitialize\r\n      >\r\n        {(formik) => {\r\n          return (\r\n            <Modal show={props.show} onHide={props.handleClose}>\r\n              <Modal.Header closeButton>\r\n          <Modal.Title>{props.taskState} Task</Modal.Title>\r\n              </Modal.Header>\r\n              <Form>\r\n                <Modal.Body>\r\n                  <FormGroup>\r\n                    <FormLabel>Title</FormLabel>\r\n                    <Field\r\n                      type=\"text\"\r\n                      id=\"title\"\r\n                      name=\"title\"\r\n                      className={`form-control ${\r\n                        formik.touched.title && formik.errors.title\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"title\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>Description</FormLabel>\r\n                    <Field\r\n                      type=\"text\"\r\n                      id=\"description\"\r\n                      name=\"description\"\r\n                      className={`form-control ${\r\n                        formik.touched.description && formik.errors.description\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                      as=\"textarea\"\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"description\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>Start Date</FormLabel>\r\n\r\n                    <DatePicker\r\n                      selected={formik.values.startDate}\r\n                      name=\"startDate\"\r\n                      id=\"startDate\"\r\n                      onBlur={formik.handleBlur}\r\n                      onChange={(date) =>\r\n                        formik.setFieldValue(\"startDate\", date)\r\n                      }\r\n                      className={`form-control ${\r\n                        formik.touched.startDate && formik.errors.startDate\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"startDate\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>End Date</FormLabel>\r\n                    <DatePicker\r\n                      selected={formik.values.endDate}\r\n                      name=\"endDate\"\r\n                      onBlur={formik.handleBlur}\r\n                      onChange={(date) => formik.setFieldValue(\"endDate\", date)}\r\n                      className={`form-control ${\r\n                        formik.touched.endDate && formik.errors.endDate\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"endDate\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    onClick={props.handleClose}\r\n                    type=\"reset\"\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  <Button variant=\"success\" type=\"submit\">\r\n                    Save Changes\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            </Modal>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskForm;\r\n"]},"metadata":{},"sourceType":"module"}