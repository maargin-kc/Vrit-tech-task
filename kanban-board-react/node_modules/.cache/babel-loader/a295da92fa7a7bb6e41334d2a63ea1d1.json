{"ast":null,"code":"import React,{useContext}from'react';import{BoardContext}from'./Board';import CardItem from'./CardItem';function Lane(props){var _useContext=useContext(BoardContext),taskState=_useContext.taskState,onDragStartHandler=_useContext.onDragStartHandler,onDragOverHandler=_useContext.onDragOverHandler;return/*#__PURE__*/React.createElement(React.Fragment,null,taskState.filter(function(x){return x.stage===props.stage.id;}).map(function(item,index){return/*#__PURE__*/React.createElement(\"div\",{draggable:true,key:index,onDragStart:function onDragStart(event){return onDragStartHandler(event,item.id,props.stage.id);},onDragOver:function onDragOver(event){return onDragOverHandler(event);}},/*#__PURE__*/React.createElement(CardItem,{task:item}));}));}export default Lane;","map":{"version":3,"sources":["D:/Vrit-tech-task/kanban-board-react/src/components/Board/Lane.js"],"names":["React","useContext","BoardContext","CardItem","Lane","props","taskState","onDragStartHandler","onDragOverHandler","filter","x","stage","id","map","item","index","event"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAcC,UAAd,KAA+B,OAA/B,CACA,OAAQC,YAAR,KAA2B,SAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,QAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqB,iBACwCJ,UAAU,CAACC,YAAD,CADlD,CACVI,SADU,aACVA,SADU,CACAC,kBADA,aACAA,kBADA,CACmBC,iBADnB,aACmBA,iBADnB,CAEjB,mBACI,wCAEAF,SAAS,CACNG,MADH,CACU,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,KAAF,GAAYN,KAAK,CAACM,KAAN,CAAYC,EAA5B,EADX,EAEGC,GAFH,CAEO,SAACC,IAAD,CAAOC,KAAP,qBACH,2BAAK,SAAS,KAAd,CACE,GAAG,CAAEA,KADP,CAEE,WAAW,CAAE,qBAACC,KAAD,QACXT,CAAAA,kBAAkB,CAACS,KAAD,CAAQF,IAAI,CAACF,EAAb,CAAiBP,KAAK,CAACM,KAAN,CAAYC,EAA7B,CADP,EAFf,CAKE,UAAU,CAAE,oBAACI,KAAD,QACVR,CAAAA,iBAAiB,CAACQ,KAAD,CADP,EALd,eASE,oBAAC,QAAD,EAAU,IAAI,CAAEF,IAAhB,EATF,CADG,EAFP,CAFA,CADJ,CAqBH,CAED,cAAeV,CAAAA,IAAf","sourcesContent":["import React,{useContext} from 'react';\r\nimport {BoardContext} from './Board'\r\nimport CardItem from './CardItem'\r\nfunction Lane(props) {\r\n    const {taskState,onDragStartHandler,onDragOverHandler} = useContext(BoardContext);\r\n    return (\r\n        <>\r\n      {\r\n        taskState\r\n          .filter(x => x.stage === props.stage.id)\r\n          .map((item, index) => (\r\n            <div draggable\r\n              key={index}\r\n              onDragStart={(event) =>\r\n                onDragStartHandler(event, item.id, props.stage.id)\r\n              }\r\n              onDragOver={(event) =>\r\n                onDragOverHandler(event)\r\n              }\r\n            >\r\n              <CardItem task={item}/>\r\n            </div>\r\n          ))\r\n      }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Lane\r\n"]},"metadata":{},"sourceType":"module"}